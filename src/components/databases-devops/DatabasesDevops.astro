---
import Button from "src/components/button/Button.astro";
import HorizontalLineTitle from "src/components/horizontal-line-title/HorizontalLineTitle.astro";
import Options from "src/components/options/Options.astro";
import "src/components/databases-devops/DatabasesDevops.less";

const {
    title = "ПРИМЕРЫ ПРОЕКТОВ",
    subtitle = "Стоимость проектов индивидуальна — все зависит от конечных задач, утвержденных с вами",
} = Astro.props;

const tasks = {
    "project-1": `<span>Задача:</span> Выявление слабых мест, предотвращение сбоев`,
    "project-2": `<span>Задача:</span> Полное сопровождение СУБД`,
    "project-3": `<span>Задача:</span> Миграция баз данных Oracle → Open Source`,
    "project-4": `<span>Задача:</span> Обеспечение высокой доступности и быстрого времени отклика (≤3 сек)`,
};

const details = {
    "project-1": `
        <span>Состав проекта:</span>
        <ul>
            <li>2 сервера СУБД</li>
            <li>Анализ проблемных мест мониторинга</li>
            <li>25-страничный отчёт с рекомендациями</li>
            <li>Сопровождение внедрения</li>
        </ul>
    `,
    "project-2": `
        <span>Состав проекта:</span>
        <ul>
            <li>20 серверов СУБД</li>
            <li>Настройка мониторинга и проактивных мер</li>
            <li>Оптимизация быстродействия</li>
            <li>SLA: 30 мин реакция / 4 часа устранение</li>
        </ul>
    `,
    "project-3": `
        <span>Состав проекта:</span>
        <ul>
            <li>ИТ-система с БД Oracle ( 200ГБ, 50 активных пользователей ) с резервным сервером</li>
            <li>Разработка и реализация плана миграции с простоем не более 10 минут</li>
            <li>Мониторинг и постмиграционная поддержка в течение месяца</li>
        </ul>
    `,
    "project-4": `
        <span>Состав проекта:</span>
        <ul>
            <li> <strong>Фронт:</strong> Нагрузка 2000 TPS</li>
            <li>Кластер MySQL из 3х нод  (dev, stage, prod)</li>
            <li>20 кластеров PostgreSQL: Patroni, pgBouncer, etcd (dev, stage, prod)</li>
            <li>PostgreSQL DWH: 4 ТБ, master-slave, 100 MB WAL/sec (dev и prod )</li>
        </ul>
    `,
};

const prices = {
    "project-1": "120 тыс. руб",
    "project-2": "200 тыс. руб/мес",
    "project-3": "300 тыс. руб",
    "project-4": "480 тыс. руб/мес",
};
---

<project-examples
    data-tasks={JSON.stringify(tasks)}
    data-details={JSON.stringify(details)}
    data-prices={JSON.stringify(prices)}
>
    <HorizontalLineTitle
        title={title}
        subtitle={subtitle}
        className="project-examples"
    >
        <Options />
        <div class="projects">
            <div class="project project-1 active" id="project-1">
                Аудит СУБД
            </div>
            <div class="project project-2" id="project-2">
                Администрирование баз данных
            </div>
            <div class="project project-3" id="project-3">
                Миграция баз данных
            </div>
            <div class="project project-4" id="project-4">
                Сопровождение mission critical баз
            </div>
            <div class="task" set:html={tasks["project-1"]} />
            <div class="details">
                <div set:html={details["project-1"]} />
                <Button
                    variant="outline"
                    id="project-price"
                    class="button"
                    label={prices["project-1"]}
                />
            </div>
        </div>
    </HorizontalLineTitle>
</project-examples>

<script is:inline>
    class ProjectExamples extends HTMLElement {
        constructor() {
            super();
            const projectsHTML = this.querySelectorAll(".projects .project");
            const taskHTML = this.querySelector(".projects .task");
            const detailsHTML = this.querySelector(".projects .details div");
            const priceButton = this.querySelector(".button");

            const tasks = JSON.parse(this.dataset?.tasks || "{}");
            const details = JSON.parse(this.dataset?.details || "{}");
            const prices = JSON.parse(this.dataset?.prices || "{}");

            projectsHTML.forEach((project) => {
                project.addEventListener("click", (clicked) => {
                    console.log("Project clicked:", clicked.target.id);
                    projectsHTML.forEach((p) => p.classList.remove("active"));
                    clicked.target.classList.add("active");

                    const id = clicked.target.id;

                    if (taskHTML && tasks[id]) {
                        taskHTML.innerHTML = tasks[id];
                    }
                    if (detailsHTML && details[id]) {
                        detailsHTML.innerHTML = details[id];
                    }

                    if (priceButton && prices[id]) {
                        priceButton.label = prices[id];
                        priceButton.textContent = prices[id];
                        console.log("Price updated to:", prices[id]);
                    } else {
                        console.error("Price button not found");
                    }
                });
            });
        }
    }
    customElements.define("project-examples", ProjectExamples);
</script>
